* Each Lemming instance owns a Job instance per pointer.
The Job instance is generated at constructor and is responsible for animation, position and so on.

Each job has a member named NextJob, NextJob is responsible to show the next state of the Lemming. A Faller Lamming can become a Walker Lemming or
something like this.

So the life period of Lemming in the first level starts with a Faller, change to Walker, change to Digger then again Walker. For each change
the current instance of the job is deleted and the NextJob instance becomes the current.
The problem is the borders for the responsibility between Job a Lemming is not clear. The Job in Lemming is deleting and its own NextJob instance
became the current Job instance inside of Lemming.

How to change this?
Should I change this?

What I dislike that I each state change caused a new Job(). Why I cannot create a vector of all Jobs in the Init function the Lemming instance copy
the required Job?

* Circular dependencies

InfoLevel has as fields a InfoLevelKeyboardManager pointer and InfoLevelMouseManager pointer

void InfoLevelKeyboardManager::specialKeyPressed(int key) ->
   StateManager::instance().changeScene(InfoLevel::instance().getMode(), InfoLevel::instance().getLevel());

an instance of InfoLevelKeyboardManager use properties from InfoLevel instance

** GameStat class and inheritance

   #+begin_src c++
//Base class for all sites
GameState {
    MouseManager *mouseManager;
    KeyboardManager *keyboardManager;

    //is initialized in init()
}

//game instructions side
class Instructions : public GameState {
}

//Credit Side
class Credits : public GameState {
}

//the game scene
class Scene : public GameState {
}

//result side
class Results : public GameState {
}

//the side before the scene starts
class InfoLevel : public GameState {
}

//the main menu
class Menu : public GameState {
}

   #+end_src   


** HardMaskManager
  
   has directly dependencies to singletons
   - LevelManager to get the current time
     and
   - Level to get it size and masked map

     at the moment no class initialize the LevelRunner and in old version it was
     StateManager which initialize the singleton of LevelManager (now LevelRunner)
     #+begin_src c++
	    void StateManager::changeScene(int levelMode, int levelNum) {
 
 
	      LevelManager::getInstance().init(modeName, levelNum);
	      Scene::getInstance().init();
	      Game::instance()->setGameState(&Scene::getInstance());
	    }
     #+end_src

     [[StateManager]] is no longer a singleton rather part of Game class, so HardMaskManager must have accesss to Game

*** initialized from
     [[Scene]]
     
*** speaks with
    [[Level]]
    [[LevelRunner]]
     
     
** Game
*** initialize
    [[SoundManager]]
    [[StateManager]]

    
** SoundManager
** StateManager
   is reponsible to create all type of [[GameState]] pages and manage the switch between them
   in the process of switching to Scene page the LevelManager must be initialized.

** Scene

*** is inherited from
    [[GameState]]

*** is parent from
    
*** is initialized from
   [[StateManager]]
   
*** initialiaze:
   [[HardMaskManager]],  [[EasyManager]] is initialized here

*** speaks with
    [[JobAssigner]], [[Cursor]], [[LevelRunner]], [[UIAdapter]], [[UI]], [[Scroller]], [[StateManger]], [[Level]], [[ParticleSystemManager]]
   
   
** GameState
   
** LevelRunner
   Is reponsible to run a level, it create the lemmings and coordinate the state of them

*** initialize
    [[Level]] [[Lemmings]] [[Job]]
    
*** is initialized from:
   StateManager
   
*** speaks with:
    [[Level]]: Level instance is initialized here.
   


** EasyManager
   
*** inherited from
    
*** is parent from
    
*** initialized from
    
*** initialialze
    
*** speak with

    
** Level
   
*** inherited from
    
*** is parent from
    
*** initialized from
    
*** initialialze
    
*** speak with
    
